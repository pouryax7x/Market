// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PostgreSQL;

namespace Market.DA.Migrations
{
    [DbContext(typeof(EntityContext))]
    [Migration("20190110171412_DA")]
    partial class DA
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Market.Model.Brand", b =>
                {
                    b.Property<int>("BrandID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("BrandID");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("Market.Model.Cart", b =>
                {
                    b.Property<int>("CartID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ProductID");

                    b.HasKey("CartID");

                    b.HasIndex("ProductID");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Market.Model.CartRecord", b =>
                {
                    b.Property<int>("CartRecordID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BuyDate");

                    b.Property<int>("Number");

                    b.Property<int>("Price");

                    b.Property<int?>("ProductID");

                    b.HasKey("CartRecordID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartRecords");
                });

            modelBuilder.Entity("Market.Model.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("Parent");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Market.Model.ChatRecord", b =>
                {
                    b.Property<int>("ChatRecordID")
                        .ValueGeneratedOnAdd();

                    b.HasKey("ChatRecordID");

                    b.ToTable("ChatRecords");
                });

            modelBuilder.Entity("Market.Model.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Subject");

                    b.Property<int?>("UserID");

                    b.HasKey("CommentID");

                    b.HasIndex("UserID");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Market.Model.Contact", b =>
                {
                    b.Property<int>("ContactID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adress");

                    b.Property<string>("Email");

                    b.Property<string>("Mobile");

                    b.HasKey("ContactID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Market.Model.MultiMedia", b =>
                {
                    b.Property<int>("MultiMediaID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MultiMediaTypeID");

                    b.Property<string>("Path");

                    b.HasKey("MultiMediaID");

                    b.HasIndex("MultiMediaTypeID");

                    b.ToTable("MultiMedias");
                });

            modelBuilder.Entity("Market.Model.MultiMediaType", b =>
                {
                    b.Property<int>("MultiMediaTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("MultiMediaTypeID");

                    b.ToTable("MultiMediaTypes");
                });

            modelBuilder.Entity("Market.Model.Nation", b =>
                {
                    b.Property<int>("NationID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("NationID");

                    b.ToTable("Nations");
                });

            modelBuilder.Entity("Market.Model.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BrandID");

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name");

                    b.Property<int?>("NationID");

                    b.HasKey("ProductID");

                    b.HasIndex("BrandID");

                    b.HasIndex("NationID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Market.Model.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CategoryID");

                    b.Property<int?>("ProductID");

                    b.HasKey("ProductCategoryID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Market.Model.ProductComment", b =>
                {
                    b.Property<int>("ProductCommentID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ProductID");

                    b.Property<int?>("ScoreCommentID");

                    b.HasKey("ProductCommentID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ScoreCommentID");

                    b.ToTable("ProductComments");
                });

            modelBuilder.Entity("Market.Model.ProductMultiMedia", b =>
                {
                    b.Property<int>("ProductMultiMediaID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MultiMediaID");

                    b.Property<int?>("ProductID");

                    b.HasKey("ProductMultiMediaID");

                    b.HasIndex("MultiMediaID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductMultiMedias");
                });

            modelBuilder.Entity("Market.Model.ProductScore", b =>
                {
                    b.Property<int>("ProductScoreID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ProductID");

                    b.Property<int?>("ScoreID");

                    b.HasKey("ProductScoreID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ScoreID");

                    b.ToTable("ProductScores");
                });

            modelBuilder.Entity("Market.Model.ProductSeller", b =>
                {
                    b.Property<int>("ProductSellerID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Number");

                    b.Property<long>("Price");

                    b.Property<int?>("ProductID");

                    b.Property<int?>("SellerID");

                    b.HasKey("ProductSellerID");

                    b.HasIndex("ProductID");

                    b.HasIndex("SellerID");

                    b.ToTable("ProductSellers");
                });

            modelBuilder.Entity("Market.Model.ProductSimilar", b =>
                {
                    b.Property<int>("ProductSimilarID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ProductID");

                    b.Property<int?>("SimilarID");

                    b.HasKey("ProductSimilarID");

                    b.HasIndex("ProductID");

                    b.HasIndex("SimilarID");

                    b.ToTable("ProductSimilars");
                });

            modelBuilder.Entity("Market.Model.Record", b =>
                {
                    b.Property<int>("RecordID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Subject");

                    b.HasKey("RecordID");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("Market.Model.Score", b =>
                {
                    b.Property<int>("ScoreID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Rank");

                    b.Property<int?>("UserID");

                    b.HasKey("ScoreID");

                    b.HasIndex("UserID");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("Market.Model.Seller", b =>
                {
                    b.Property<int>("SellerID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("UserID");

                    b.HasKey("SellerID");

                    b.HasIndex("UserID");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("Market.Model.Similar", b =>
                {
                    b.Property<int>("SimilarID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ProductID");

                    b.HasKey("SimilarID");

                    b.HasIndex("ProductID");

                    b.ToTable("Similars");
                });

            modelBuilder.Entity("Market.Model.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("NationalNumber");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Market.Model.UserCart", b =>
                {
                    b.Property<int>("UserCartID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CartID");

                    b.Property<int?>("UserID");

                    b.HasKey("UserCartID");

                    b.HasIndex("CartID");

                    b.HasIndex("UserID");

                    b.ToTable("UserCarts");
                });

            modelBuilder.Entity("Market.Model.UserCartRecord", b =>
                {
                    b.Property<int>("UserCartRecordID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CartRecordID");

                    b.Property<int?>("UserID");

                    b.HasKey("UserCartRecordID");

                    b.HasIndex("CartRecordID");

                    b.HasIndex("UserID");

                    b.ToTable("UserCartRecords");
                });

            modelBuilder.Entity("Market.Model.UserChatRecord", b =>
                {
                    b.Property<int>("UserChatRecordID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ChatRecordID");

                    b.Property<int?>("UserID");

                    b.HasKey("UserChatRecordID");

                    b.HasIndex("ChatRecordID");

                    b.HasIndex("UserID");

                    b.ToTable("UserChatRecords");
                });

            modelBuilder.Entity("Market.Model.UserContact", b =>
                {
                    b.Property<int>("UserContactID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ContactID");

                    b.Property<int?>("UserID");

                    b.HasKey("UserContactID");

                    b.HasIndex("ContactID");

                    b.HasIndex("UserID");

                    b.ToTable("UserContacts");
                });

            modelBuilder.Entity("Market.Model.UserRecord", b =>
                {
                    b.Property<int>("UserRecordID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("RecordID");

                    b.Property<int?>("UserID");

                    b.HasKey("UserRecordID");

                    b.HasIndex("RecordID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRecords");
                });

            modelBuilder.Entity("Market.Model.Cart", b =>
                {
                    b.HasOne("Market.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID");
                });

            modelBuilder.Entity("Market.Model.CartRecord", b =>
                {
                    b.HasOne("Market.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID");
                });

            modelBuilder.Entity("Market.Model.Comment", b =>
                {
                    b.HasOne("Market.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Market.Model.MultiMedia", b =>
                {
                    b.HasOne("Market.Model.MultiMediaType", "MultiMediaType")
                        .WithMany()
                        .HasForeignKey("MultiMediaTypeID");
                });

            modelBuilder.Entity("Market.Model.Product", b =>
                {
                    b.HasOne("Market.Model.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandID");

                    b.HasOne("Market.Model.Nation", "Nation")
                        .WithMany()
                        .HasForeignKey("NationID");
                });

            modelBuilder.Entity("Market.Model.ProductCategory", b =>
                {
                    b.HasOne("Market.Model.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID");

                    b.HasOne("Market.Model.Product", "Product")
                        .WithMany("ProductCategory")
                        .HasForeignKey("ProductID");
                });

            modelBuilder.Entity("Market.Model.ProductComment", b =>
                {
                    b.HasOne("Market.Model.Product", "Product")
                        .WithMany("ProductComment")
                        .HasForeignKey("ProductID");

                    b.HasOne("Market.Model.Comment", "Score")
                        .WithMany()
                        .HasForeignKey("ScoreCommentID");
                });

            modelBuilder.Entity("Market.Model.ProductMultiMedia", b =>
                {
                    b.HasOne("Market.Model.MultiMedia", "MultiMedia")
                        .WithMany()
                        .HasForeignKey("MultiMediaID");

                    b.HasOne("Market.Model.Product", "Product")
                        .WithMany("ProductMultiMedia")
                        .HasForeignKey("ProductID");
                });

            modelBuilder.Entity("Market.Model.ProductScore", b =>
                {
                    b.HasOne("Market.Model.Product", "Product")
                        .WithMany("ProductScore")
                        .HasForeignKey("ProductID");

                    b.HasOne("Market.Model.Score", "Score")
                        .WithMany()
                        .HasForeignKey("ScoreID");
                });

            modelBuilder.Entity("Market.Model.ProductSeller", b =>
                {
                    b.HasOne("Market.Model.Product", "Product")
                        .WithMany("ProductSeller")
                        .HasForeignKey("ProductID");

                    b.HasOne("Market.Model.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerID");
                });

            modelBuilder.Entity("Market.Model.ProductSimilar", b =>
                {
                    b.HasOne("Market.Model.Product", "Product")
                        .WithMany("ProductSimilar")
                        .HasForeignKey("ProductID");

                    b.HasOne("Market.Model.Similar", "Similar")
                        .WithMany()
                        .HasForeignKey("SimilarID");
                });

            modelBuilder.Entity("Market.Model.Score", b =>
                {
                    b.HasOne("Market.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Market.Model.Seller", b =>
                {
                    b.HasOne("Market.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Market.Model.Similar", b =>
                {
                    b.HasOne("Market.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID");
                });

            modelBuilder.Entity("Market.Model.UserCart", b =>
                {
                    b.HasOne("Market.Model.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartID");

                    b.HasOne("Market.Model.User", "User")
                        .WithMany("UserCarts")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Market.Model.UserCartRecord", b =>
                {
                    b.HasOne("Market.Model.CartRecord", "CartRecord")
                        .WithMany()
                        .HasForeignKey("CartRecordID");

                    b.HasOne("Market.Model.User", "User")
                        .WithMany("UserCartRecords")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Market.Model.UserChatRecord", b =>
                {
                    b.HasOne("Market.Model.ChatRecord", "ChatRecord")
                        .WithMany()
                        .HasForeignKey("ChatRecordID");

                    b.HasOne("Market.Model.User", "User")
                        .WithMany("UserChatRecords")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Market.Model.UserContact", b =>
                {
                    b.HasOne("Market.Model.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID");

                    b.HasOne("Market.Model.User", "User")
                        .WithMany("UserContacts")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Market.Model.UserRecord", b =>
                {
                    b.HasOne("Market.Model.Record", "Record")
                        .WithMany()
                        .HasForeignKey("RecordID");

                    b.HasOne("Market.Model.User", "User")
                        .WithMany("UserSearchs")
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
